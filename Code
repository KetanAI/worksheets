{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from sklearn.svm import SVC,SVR\n",
    "import xgboost as xgb\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.decomposition import TruncatedSVD\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.ensemble import RandomForestClassifier, BaggingRegressor\n",
    "import nltk\n",
    "from xgboost import XGBRegressor\n",
    "from gensim import corpora, models\n",
    "import gensim\n",
    "import lightgbm as lgb\n",
    "from sklearn.metrics import accuracy_score, classification_report, mean_squared_error, confusion_matrix\n",
    "import numpy as np\n",
    "from sklearn.linear_model import LinearRegression, Ridge, RidgeCV, BayesianRidge, Lasso\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from nltk.corpus import stopwords\n",
    "from nltk.tokenize import word_tokenize\n",
    "from sklearn.feature_extraction.text import HashingVectorizer, TfidfVectorizer\n",
    "from nltk.stem import PorterStemmer, WordNetLemmatizer\n",
    "import re\n",
    "from nltk.corpus import stopwords\n",
    "from nltk.stem import WordNetLemmatizer\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from scipy.sparse import hstack\n",
    "from sklearn.model_selection import train_test_split\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Reading and cleaning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train = pd.read_csv('X_train.csv')\n",
    "X_submission = pd.read_csv('X_test.csv')\n",
    "X_train.drop(columns=['ProductId','UserId'],inplace=True)\n",
    "X_submission.drop(columns=['ProductId','UserId'],inplace=True)\n",
    "def help(df):\n",
    "    df['Helpfulness'] = df['HelpfulnessNumerator'] / df['HelpfulnessDenominator']\n",
    "    df['Helpfulness'] = df['Helpfulness'].fillna(0)\n",
    "    df['ReviewLength'] = df.apply(lambda row : len(row['Text'].split()) if type(row['Text']) == str else 0, axis = 1)\n",
    "    return df\n",
    "X_train = help(X_train)\n",
    "X_submission = help(X_submission)\n",
    "X_train.fillna('',inplace=True)\n",
    "#Used a different notebook for calculating the sentiment score and saved as csv\n",
    "X_train['sentiment'] = pd.read_csv('sentiment_train.csv')['sentiment']  \n",
    "X_submission['sentiment'] = pd.read_csv('sentiment_test.csv')['sentiment']\n",
    "#scaling\n",
    "columns_to_scale = ['HelpfulnessNumerator', 'HelpfulnessDenominator', 'Helpfulness', 'ReviewLength','sentiment', 'Time']\n",
    "scaler = StandardScaler()\n",
    "X_train[columns_to_scale] = scaler.fit_transform(X_train[columns_to_scale])\n",
    "X_submission[columns_to_scale] = scaler.transform(X_submission[columns_to_scale])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [],
   "source": [
    "def clean_text(text):\n",
    "    text = text.lower()\n",
    "    text = re.sub(r'[^a-zA-Z\\s]', '', text)\n",
    "    words = word_tokenize(text)\n",
    "    stop_words = set(stopwords.words('english'))\n",
    "    words = [word for word in words if word not in stop_words]\n",
    "    lemmatizer = WordNetLemmatizer()\n",
    "    words = [lemmatizer.lemmatize(word) for word in words]\n",
    "    cleaned_text = ' '.join(words)\n",
    "    return cleaned_text\n",
    "\n",
    "X_train['Text'] = X_train['Text'].apply(clean_text)\n",
    "X_train['Summary'] = X_train['Summary'].apply(clean_text)\n",
    "X_submission['Text'] = X_submission['Text'].apply(clean_text)\n",
    "X_submission['Summary'] = X_submission['Summary'].apply(clean_text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package punkt to\n",
      "[nltk_data]     C:\\Users\\91960\\AppData\\Roaming\\nltk_data...\n",
      "[nltk_data]   Package punkt is already up-to-date!\n"
     ]
    }
   ],
   "source": [
    "nltk.download('punkt')  # Ensure the NLTK punkt tokenizer is available\n",
    "\n",
    "def count_words(text):\n",
    "    words = nltk.word_tokenize(text)\n",
    "    return len(words)\n",
    "\n",
    "def count_characters(text):\n",
    "    return len(text)\n",
    "\n",
    "def avg_word_length(text):\n",
    "    words = nltk.word_tokenize(text)\n",
    "    word_lengths = [len(word) for word in words]\n",
    "    if len(word_lengths) > 0:\n",
    "        return sum(word_lengths) / len(word_lengths)\n",
    "    else:\n",
    "        return 0  # Avoid division by zero\n",
    "def avg_sentence_length(text):\n",
    "    sentences = nltk.sent_tokenize(text)\n",
    "    words_in_sentences = [len(nltk.word_tokenize(sentence)) for sentence in sentences]\n",
    "    if len(words_in_sentences) > 0:\n",
    "        return sum(words_in_sentences) / len(words_in_sentences)\n",
    "    else:\n",
    "        return 0\n",
    "        \n",
    "def count_sentences(text):\n",
    "    sentences = nltk.sent_tokenize(text)\n",
    "    return len(sentences)\n",
    "\n",
    "def text_statistic(DF):\n",
    "    df = DF.copy()\n",
    "    df['avg_word_length'] = df['Text'].apply(avg_word_length)\n",
    "    df['avg_sentence_length'] = df['Text'].apply(avg_sentence_length)\n",
    "    df['word_count'] = df['Text'].apply(count_words)\n",
    "    df['char_count'] = df['Text'].apply(count_characters)\n",
    "    df['sentence_count'] = df['Text'].apply(count_sentences)\n",
    "    df['avg_word_length_s'] = df['Summary'].apply(avg_word_length)\n",
    "    df['avg_sentence_length_s'] = df['Summary'].apply(avg_sentence_length)\n",
    "    df['word_count_s'] = df['Summary'].apply(count_words)\n",
    "    df['char_count_s'] = df['Summary'].apply(count_characters)\n",
    "    df['sentence_count_s'] = df['Summary'].apply(count_sentences)\n",
    "    return df\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Glove Embedding Columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:20: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1267398244.py:22: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`\n",
      "  X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n"
     ]
    }
   ],
   "source": [
    "dim=300\n",
    "glove_embeddings = {}\n",
    "with open('glove.42B.300d.txt', 'r', encoding='utf-8') as f:\n",
    "    for line in f:\n",
    "        values = line.split()\n",
    "        word = values[0]\n",
    "        vector = np.array(values[1:], dtype='float32')\n",
    "        glove_embeddings[word] = vector\n",
    "\n",
    "def create_embedding_columns(text):\n",
    "    if isinstance(text, str):\n",
    "        tokens = text.split()  # Tokenize the text if it's a string\n",
    "    else:\n",
    "        tokens = []  # Use an empty list for non-string values (adjust as needed)\n",
    "    embeddings = [glove_embeddings.get(token, np.zeros(dim)) for token in tokens]\n",
    "    return np.mean(embeddings, axis=0) if embeddings else np.zeros(dim)\n",
    "\n",
    "\n",
    "# Apply the function to the CombinedText column and create embedding columns\n",
    "X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Text'].apply(create_embedding_columns).tolist())\n",
    "X_train[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_train['Summary'].apply(create_embedding_columns).tolist())\n",
    "X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Text'].apply(create_embedding_columns).tolist())\n",
    "X_submission[['dim{}'.format(i) for i in range(1, dim+1)]] = pd.DataFrame(X_submission['Summary'].apply(create_embedding_columns).tolist())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Text Stats Columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train_stats = text_statistic(X_train)\n",
    "X_submission_stats = text_statistic(X_submission)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "TF-IDF Columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [],
   "source": [
    "text_vectorizer = TfidfVectorizer(ngram_range=(1, 4),max_features=50000)\n",
    "summary_vectorizer = TfidfVectorizer(ngram_range=(1, 4),max_features=50000)\n",
    "\n",
    "\n",
    "text_tfidf = text_vectorizer.fit_transform(X_train['Text'])\n",
    "summary_tfidf = summary_vectorizer.fit_transform(X_train['Summary'])\n",
    "\n",
    "\n",
    "text_tfidf_sub = text_vectorizer.transform(X_submission['Text'])\n",
    "summary_tfidf_sub = summary_vectorizer.transform(X_submission['Summary'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Stacking the columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = hstack([X_train_stats.drop(columns=['Id','Score','Text','Summary']), text_tfidf, summary_tfidf])\n",
    "xsub = hstack([X_submission_stats.drop(columns=['Id','Score','Text','Summary']), text_tfidf_sub, summary_tfidf_sub])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Train-Test Splitting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train2, X_test, Y_train, Y_test = train_test_split(\n",
    "        x,\n",
    "        X_train['Score'],\n",
    "        test_size=1/4.0,\n",
    "        random_state=0\n",
    "    )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Final Training - Post Hyperparameter tuning "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RMSE regressor =  0.7557473452096136\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ridge = Ridge(alpha=3.3)  #\n",
    "xgb_model = xgb.XGBRegressor(objective='reg:squarederror' , eval_metric='rmse')\n",
    " \n",
    "ridge.fit(X_train2, Y_train)\n",
    "into_xgb = ridge.predict(X_train2)\n",
    "xgb_model.fit(into_xgb.reshape(-1,1),Y_train)\n",
    "\n",
    "into_xgb_test = ridge.predict(X_test)\n",
    "predictions = xgb_model.predict(into_xgb_test.reshape(-1,1))\n",
    "Y_test_predictions = np.clip(predictions, 1, 5)\n",
    "rmse = np.sqrt(mean_squared_error(Y_test, Y_test_predictions))\n",
    "print(\"RMSE regressor = \", rmse)\n",
    "cm = confusion_matrix(Y_test, np.round(Y_test_predictions), normalize='true')\n",
    "sns.heatmap(cm, annot=True)\n",
    "plt.title('Confusion matrix of the classifier')\n",
    "plt.xlabel('Predicted')\n",
    "plt.ylabel('True')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\91960\\AppData\\Local\\Temp\\ipykernel_22340\\1118271835.py:8: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  sub['Id'] = pd.read_csv('X_test.csv')['Id']\n"
     ]
    }
   ],
   "source": [
    "into_xgb_sub = ridge.predict(xsub)\n",
    "predictions_sub = xgb_model.predict(into_xgb_sub.reshape(-1,1))\n",
    "Y_sub_predictions = np.clip(predictions_sub, 1, 5)\n",
    "\n",
    "\n",
    "X_submission['Score'] = Y_sub_predictions\n",
    "sub = X_submission[['Id','Score']]\n",
    "sub['Id'] = pd.read_csv('X_test.csv')['Id']\n",
    "sub.to_csv('submission.csv',index=False)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "tf",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
